{"ast":null,"code":"'use strict';\n\nvar callBind = require('call-bind');\n\nvar callBound = require('call-bind/callBound');\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar isTypedArray = require('is-typed-array');\n\nvar $ArrayBuffer = GetIntrinsic('ArrayBuffer', true);\nvar $Float32Array = GetIntrinsic('Float32Array', true);\nvar $byteLength = callBound('ArrayBuffer.prototype.byteLength', true); // in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method\n\nvar abSlice = $ArrayBuffer && !$byteLength && new $ArrayBuffer().slice;\nvar $abSlice = abSlice && callBind(abSlice);\nmodule.exports = $byteLength || $abSlice ? function isArrayBuffer(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  try {\n    if ($byteLength) {\n      $byteLength(obj);\n    } else {\n      $abSlice(obj, 0);\n    }\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n} : $Float32Array // in node 0.8, ArrayBuffers have no prototype or own methods\n? function IsArrayBuffer(obj) {\n  try {\n    return new $Float32Array(obj).buffer === obj && !isTypedArray(obj);\n  } catch (e) {\n    return false;\n  }\n} : function isArrayBuffer(obj) {\n  // eslint-disable-line no-unused-vars\n  return false;\n};","map":{"version":3,"names":["callBind","require","callBound","GetIntrinsic","isTypedArray","$ArrayBuffer","$Float32Array","$byteLength","abSlice","slice","$abSlice","module","exports","isArrayBuffer","obj","e","IsArrayBuffer","buffer"],"sources":["C:/Users/patri/OneDrive/New folder/Documentos/vsCode/facebrain/node_modules/is-array-buffer/index.js"],"sourcesContent":["'use strict';\n\nvar callBind = require('call-bind');\nvar callBound = require('call-bind/callBound');\nvar GetIntrinsic = require('get-intrinsic');\nvar isTypedArray = require('is-typed-array');\n\nvar $ArrayBuffer = GetIntrinsic('ArrayBuffer', true);\nvar $Float32Array = GetIntrinsic('Float32Array', true);\nvar $byteLength = callBound('ArrayBuffer.prototype.byteLength', true);\n\n// in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method\nvar abSlice = $ArrayBuffer && !$byteLength && new $ArrayBuffer().slice;\nvar $abSlice = abSlice && callBind(abSlice);\n\nmodule.exports = $byteLength || $abSlice\n\t? function isArrayBuffer(obj) {\n\t\tif (!obj || typeof obj !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tif ($byteLength) {\n\t\t\t\t$byteLength(obj);\n\t\t\t} else {\n\t\t\t\t$abSlice(obj, 0);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t: $Float32Array\n\t\t// in node 0.8, ArrayBuffers have no prototype or own methods\n\t\t? function IsArrayBuffer(obj) {\n\t\t\ttry {\n\t\t\t\treturn (new $Float32Array(obj)).buffer === obj && !isTypedArray(obj);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t: function isArrayBuffer(obj) { // eslint-disable-line no-unused-vars\n\t\t\treturn false;\n\t\t};\n"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAII,YAAY,GAAGF,YAAY,CAAC,aAAD,EAAgB,IAAhB,CAA/B;AACA,IAAIG,aAAa,GAAGH,YAAY,CAAC,cAAD,EAAiB,IAAjB,CAAhC;AACA,IAAII,WAAW,GAAGL,SAAS,CAAC,kCAAD,EAAqC,IAArC,CAA3B,C,CAEA;;AACA,IAAIM,OAAO,GAAGH,YAAY,IAAI,CAACE,WAAjB,IAAgC,IAAIF,YAAJ,GAAmBI,KAAjE;AACA,IAAIC,QAAQ,GAAGF,OAAO,IAAIR,QAAQ,CAACQ,OAAD,CAAlC;AAEAG,MAAM,CAACC,OAAP,GAAiBL,WAAW,IAAIG,QAAf,GACd,SAASG,aAAT,CAAuBC,GAAvB,EAA4B;EAC7B,IAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;IACpC,OAAO,KAAP;EACA;;EACD,IAAI;IACH,IAAIP,WAAJ,EAAiB;MAChBA,WAAW,CAACO,GAAD,CAAX;IACA,CAFD,MAEO;MACNJ,QAAQ,CAACI,GAAD,EAAM,CAAN,CAAR;IACA;;IACD,OAAO,IAAP;EACA,CAPD,CAOE,OAAOC,CAAP,EAAU;IACX,OAAO,KAAP;EACA;AACD,CAfe,GAgBdT,aAAa,CACd;AADc,EAEZ,SAASU,aAAT,CAAuBF,GAAvB,EAA4B;EAC7B,IAAI;IACH,OAAQ,IAAIR,aAAJ,CAAkBQ,GAAlB,CAAD,CAAyBG,MAAzB,KAAoCH,GAApC,IAA2C,CAACV,YAAY,CAACU,GAAD,CAA/D;EACA,CAFD,CAEE,OAAOC,CAAP,EAAU;IACX,OAAO,KAAP;EACA;AACD,CARa,GASZ,SAASF,aAAT,CAAuBC,GAAvB,EAA4B;EAAE;EAC/B,OAAO,KAAP;AACA,CA3BH"},"metadata":{},"sourceType":"script"}