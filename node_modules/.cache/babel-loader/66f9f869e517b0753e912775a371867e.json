{"ast":null,"code":"/**\n * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion\n * which should only be used for elements with a non-presentational role i.e.\n * `role=\"none\"` and `role=\"presentation\"` will not be excluded.\n *\n * Implements aria-hidden semantics (i.e. parent overrides child)\n * Ignores \"Child Presentational: True\" characteristics\n *\n * @param element\n * @param options\n * @returns {boolean} true if excluded, otherwise false\n */\nexport function isInaccessible(element) {\n  var _element$ownerDocumen;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$getComputedS = options.getComputedStyle,\n      getComputedStyle = _options$getComputedS === void 0 ? (_element$ownerDocumen = element.ownerDocument.defaultView) === null || _element$ownerDocumen === void 0 ? void 0 : _element$ownerDocumen.getComputedStyle : _options$getComputedS,\n      _options$isSubtreeIna = options.isSubtreeInaccessible,\n      isSubtreeInaccessibleImpl = _options$isSubtreeIna === void 0 ? isSubtreeInaccessible : _options$isSubtreeIna;\n\n  if (typeof getComputedStyle !== \"function\") {\n    throw new TypeError(\"Owner document of the element needs to have an associated window.\");\n  } // since visibility is inherited we can exit early\n\n\n  if (getComputedStyle(element).visibility === \"hidden\") {\n    return true;\n  }\n\n  var currentElement = element;\n\n  while (currentElement) {\n    if (isSubtreeInaccessibleImpl(currentElement, {\n      getComputedStyle: getComputedStyle\n    })) {\n      return true;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return false;\n}\n/**\n *\n * @param element\n * @param options\n * @returns {boolean} - `true` if every child of the element is inaccessible\n */\n\nexport function isSubtreeInaccessible(element) {\n  var _element$ownerDocumen2;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$getComputedS2 = options.getComputedStyle,\n      getComputedStyle = _options$getComputedS2 === void 0 ? (_element$ownerDocumen2 = element.ownerDocument.defaultView) === null || _element$ownerDocumen2 === void 0 ? void 0 : _element$ownerDocumen2.getComputedStyle : _options$getComputedS2;\n\n  if (typeof getComputedStyle !== \"function\") {\n    throw new TypeError(\"Owner document of the element needs to have an associated window.\");\n  }\n\n  if (element.hidden === true) {\n    return true;\n  }\n\n  if (element.getAttribute(\"aria-hidden\") === \"true\") {\n    return true;\n  }\n\n  if (getComputedStyle(element).display === \"none\") {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAT,CACNC,OADM,EAGI;EAAA;;EAAA,IADVC,OAA8B,uEAAG,EACvB;EACV,4BAGIA,OAAO,CAFVC,gBADD;EAAA,IACCA,gBAAgB,+DAAGF,OAAO,CAACG,aAARH,CAAsBI,WAAzB,MAAoC,IAApC,IAAoCC,gCAApC,GAAoC,MAApC,GAAGA,sBAAmCH,gBAAtC,GAAsDI,qBADvE;EAAA,IACuEC,wBAEnEN,OAAO,CADVO,qBAFD;EAAA,IAEwBC,yBAAyB,sCAAGD,qBAAH,GAAwBD,qBAFzE;;EAIA,IAAI,OAAOL,gBAAP,KAA4B,UAAhC,EAA4C;IAC3C,MAAM,IAAIQ,SAAJ,CACL,mEADK,CAAN;EAGD,CATU,CAUV;;;EACA,IAAIR,gBAAgB,CAACF,OAAD,CAAhBE,CAA0BS,UAA1BT,KAAyC,QAA7C,EAAuD;IACtD,OAAO,IAAP;EACD;;EAEA,IAAIU,cAA8B,GAAGZ,OAArC;;EACA,OAAOY,cAAP,EAAuB;IACtB,IAAIH,yBAAyB,CAACG,cAAD,EAAiB;MAAEV,gBAAgB,EAAhBA;IAAF,CAAjB,CAA7B,EAAqE;MACpE,OAAO,IAAP;IACD;;IAEAU,cAAc,GAAGA,cAAc,CAACC,aAAhCD;EACD;;EAEA,OAAO,KAAP;AACD;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASJ,qBAAT,CACNR,OADM,EAGI;EAAA;;EAAA,IADVC,OAAqC,uEAAG,EAC9B;EACV,6BAEIA,OAAO,CADVC,gBADD;EAAA,IACCA,gBAAgB,iEAAGF,OAAO,CAACG,aAARH,CAAsBI,WAAzB,MAAoC,IAApC,IAAoCU,iCAApC,GAAoC,MAApC,GAAGA,uBAAmCZ,gBAAtC,GAAsDa,sBADvE;;EAGA,IAAI,OAAOb,gBAAP,KAA4B,UAAhC,EAA4C;IAC3C,MAAM,IAAIQ,SAAJ,CACL,mEADK,CAAN;EAGD;;EAEA,IAAKV,OAAO,CAAiBgB,MAAxBhB,KAAmC,IAAxC,EAA8C;IAC7C,OAAO,IAAP;EACD;;EAEA,IAAIA,OAAO,CAACiB,YAARjB,CAAqB,aAArBA,MAAwC,MAA5C,EAAoD;IACnD,OAAO,IAAP;EACD;;EAEA,IAAIE,gBAAgB,CAACF,OAAD,CAAhBE,CAA0BgB,OAA1BhB,KAAsC,MAA1C,EAAkD;IACjD,OAAO,IAAP;EACD;;EAEA,OAAO,KAAP;AACD","names":["isInaccessible","element","options","getComputedStyle","ownerDocument","defaultView","_element$ownerDocumen","_options$getComputedS","_options$isSubtreeIna","isSubtreeInaccessible","isSubtreeInaccessibleImpl","TypeError","visibility","currentElement","parentElement","_element$ownerDocumen2","_options$getComputedS2","hidden","getAttribute","display"],"sources":["C:\\Users\\patri\\OneDrive\\New folder\\Documentos\\vsCode\\facebrain\\node_modules\\dom-accessibility-api\\sources\\is-inaccessible.ts"],"sourcesContent":["export interface IsInaccessibleOptions {\n\tgetComputedStyle?: typeof window.getComputedStyle;\n\t/**\n\t * Can be used to return cached results from previous isSubtreeInaccessible calls.\n\t */\n\tisSubtreeInaccessible?: (element: Element) => boolean;\n}\n\n/**\n * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion\n * which should only be used for elements with a non-presentational role i.e.\n * `role=\"none\"` and `role=\"presentation\"` will not be excluded.\n *\n * Implements aria-hidden semantics (i.e. parent overrides child)\n * Ignores \"Child Presentational: True\" characteristics\n *\n * @param element\n * @param options\n * @returns {boolean} true if excluded, otherwise false\n */\nexport function isInaccessible(\n\telement: Element,\n\toptions: IsInaccessibleOptions = {}\n): boolean {\n\tconst {\n\t\tgetComputedStyle = element.ownerDocument.defaultView?.getComputedStyle,\n\t\tisSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible,\n\t} = options;\n\tif (typeof getComputedStyle !== \"function\") {\n\t\tthrow new TypeError(\n\t\t\t\"Owner document of the element needs to have an associated window.\"\n\t\t);\n\t}\n\t// since visibility is inherited we can exit early\n\tif (getComputedStyle(element).visibility === \"hidden\") {\n\t\treturn true;\n\t}\n\n\tlet currentElement: Element | null = element;\n\twhile (currentElement) {\n\t\tif (isSubtreeInaccessibleImpl(currentElement, { getComputedStyle })) {\n\t\t\treturn true;\n\t\t}\n\n\t\tcurrentElement = currentElement.parentElement;\n\t}\n\n\treturn false;\n}\n\nexport interface IsSubtreeInaccessibleOptions {\n\tgetComputedStyle?: typeof window.getComputedStyle;\n}\n\n/**\n *\n * @param element\n * @param options\n * @returns {boolean} - `true` if every child of the element is inaccessible\n */\nexport function isSubtreeInaccessible(\n\telement: Element,\n\toptions: IsSubtreeInaccessibleOptions = {}\n): boolean {\n\tconst {\n\t\tgetComputedStyle = element.ownerDocument.defaultView?.getComputedStyle,\n\t} = options;\n\tif (typeof getComputedStyle !== \"function\") {\n\t\tthrow new TypeError(\n\t\t\t\"Owner document of the element needs to have an associated window.\"\n\t\t);\n\t}\n\n\tif ((element as HTMLElement).hidden === true) {\n\t\treturn true;\n\t}\n\n\tif (element.getAttribute(\"aria-hidden\") === \"true\") {\n\t\treturn true;\n\t}\n\n\tif (getComputedStyle(element).display === \"none\") {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"]},"metadata":{},"sourceType":"module"}